CREATE TABLE cars (
  car_id SERIAL PRIMARY KEY,
  make TEXT,
  brand TEXT,
  model TEXT,
  version TEXT,
  color TEXT,
  fuel_type TEXT,
  transmission TEXT,
  doors TEXT,
  body_style TEXT,
  tire_type TEXT,
  model_year_range TEXT,
  vehicle TEXT,
  type TEXT,
  monthly_fee_without_tax DECIMAL,
  maximum_horsepower DECIMAL,
  maximum_horsepower_unit TEXT,
  maximum_speed DECIMAL,
  maximum_speed_unit TEXT,
  fuel_capacity DECIMAL,
  fuel_capacity_unit TEXT,
  energy_label TEXT,
  energy_label_url TEXT,
  eu_energy_label_class TEXT
);

CREATE TABLE car_features (
  feature_id SERIAL PRIMARY KEY,
  car_id INTEGER REFERENCES cars(car_id) ON DELETE CASCADE,
  category TEXT,
  value TEXT
);

CREATE TABLE car_images (
  image_id SERIAL PRIMARY KEY,
  car_id INTEGER REFERENCES cars(car_id) ON DELETE CASCADE,
  image_url TEXT
);

CREATE TABLE websites (
  website_id SERIAL PRIMARY KEY,
  car_id INTEGER REFERENCES cars(car_id) ON DELETE CASCADE,
  name TEXT,
  url TEXT,
  main_url TEXT,
  logo_url TEXT
);

CREATE TABLE website_services (
  service_id SERIAL PRIMARY KEY,
  website_id INTEGER REFERENCES websites(website_id) ON DELETE CASCADE,
  service_name TEXT
);

CREATE TABLE pricing_options (
  pricing_id SERIAL PRIMARY KEY,
  car_id INTEGER REFERENCES cars(car_id) ON DELETE CASCADE,
  website_id INTEGER REFERENCES websites(website_id) ON DELETE CASCADE,
  duration_months INTEGER,
  annual_kms INTEGER,
  monthly_fee DECIMAL,
  monthly_fee_without_tax DECIMAL,
  total_payable TEXT,
  excess_km_rate TEXT,
  underuse_km_refund TEXT
);

create table users (
  id uuid not null default extensions.uuid_generate_v4 (),
  email text not null,
  password_hash text null,
  first_name text null,
  last_name text null,
  phone text null,
  profile_image_url text null,
  address text null,
  customer_type text null,
  role text null default 'user'::text,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint users_pkey primary key (id),
  constraint users_email_key unique (email),
  constraint users_customer_type_check check (
    (
      customer_type = any (
        array[
          'individual'::text,
          'self_employed'::text,
          'company'::text
        ]
      )
    )
  ),
  constraint users_role_check check (
    (
      role = any (
        array['user'::text, 'admin'::text, 'manager'::text]
      )
    )
  )
) TABLESPACE pg_default;

-- Create bookings table for car rental system
CREATE TABLE IF NOT EXISTS bookings (
  booking_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  car_id INTEGER NOT NULL REFERENCES cars(car_id) ON DELETE CASCADE,
  pricing_option_id INTEGER NOT NULL REFERENCES pricing_options(pricing_id) ON DELETE CASCADE,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'active', 'completed', 'cancelled')),
  total_amount DECIMAL(10,2) NOT NULL DEFAULT 0,
  monthly_fee DECIMAL(10,2) NOT NULL DEFAULT 0,
  duration_months INTEGER NOT NULL DEFAULT 1,
  annual_kms INTEGER NOT NULL DEFAULT 0,
  special_requests TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_bookings_user_id ON bookings(user_id);
CREATE INDEX IF NOT EXISTS idx_bookings_car_id ON bookings(car_id);
CREATE INDEX IF NOT EXISTS idx_bookings_status ON bookings(status);
CREATE INDEX IF NOT EXISTS idx_bookings_start_date ON bookings(start_date);
CREATE INDEX IF NOT EXISTS idx_bookings_end_date ON bookings(end_date);
CREATE INDEX IF NOT EXISTS idx_bookings_created_at ON bookings(created_at);

-- Create a function to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
CREATE TRIGGER update_bookings_updated_at
    BEFORE UPDATE ON bookings
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Add some constraints to ensure data integrity
ALTER TABLE bookings 
ADD CONSTRAINT check_booking_dates 
CHECK (start_date <= end_date);

ALTER TABLE bookings 
ADD CONSTRAINT check_positive_amounts 
CHECK (total_amount >= 0 AND monthly_fee >= 0);

ALTER TABLE bookings 
ADD CONSTRAINT check_positive_duration 
CHECK (duration_months > 0 AND annual_kms >= 0);